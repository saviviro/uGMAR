qrt11t$ch_res$stdError
qrt12$ch_res$testStat
qrt12$ch_res$pvalue
qrt12$ch_res$indStat
qrt12$ch_res$stdError
qrt23$ch_res$testStat
qrt23$ch_res$indStat
qrt23$ch_res$stdError
qrt23t$ch_res$testStat
qrt23t$ch_res$pvalue
qrt23t$ch_res$indStat
qrt23t$ch_res$stdError
qrt12r$ch_res$testStat
qrt12r$ch_res$testStat
qrt12r$ch_res$indStat
qrt12r$ch_res$stdError
devtools::test()
params11t <- c(0.9, 0.92, 1.01, 2.89)
params12 <- c(1.7, 0.85, 0.3, 4.12, 0.73, 1.98, 0.63)
params23 <- c(2.7, 0.8, -0.06, 0.3, 3.5, 0.8, -0.07, 2.6, 7.2, 0.3, -0.01, 0.1, 0.6, 0.25)
params23t <- c(2.54, 0.99, -0.21, 0.36, 5.13, 0.9, -0.24, 1.88, 7.93, 0.2, 0.03, 0.1, 0.53, 0.36, 9, 10, 11)
params12r <- c(2.18, 2.93, 0.81, 0.29, 1.9, 0.64)
params12gs <- c(4.13, 0.73, 1.98, 1.7, 0.85, 0.3, 0.37, 9) # M1=1, M2=1
params13gsr <- c(4.8, 3.31, 3.74, 0.69, 2, 0.19, 0.41, 0.34, 0.3, 9) # M1=2, M2=1
stmar11 <- GSMAR(data=simudata[20:50], p=1, M=1, params=params11t, model="StMAR")
gmar12 <- GSMAR(data=simudata[1:100], p=1, M=2, params=params12, model="GMAR")
gmar23 <- GSMAR(data=simudata[120:200], p=2, M=3, params=params23, model="GMAR")
stmar23 <- GSMAR(data=simudata[120:200], p=2, M=3, params=params23t, model="StMAR")
gmar12r <- GSMAR(data=simudata[100:133], p=1, M=2, params=params12r, model="GMAR", restricted=TRUE)
gstmar12 <- GSMAR(data=simudata[1:50], p=1, M=c(1, 1), params=params12gs, model="G-StMAR")
gstmar13r <- GSMAR(data=simudata[1:50], p=1, M=c(2, 1), params=params13gsr, model="G-StMAR", restricted=TRUE)
set.seed(1); qrt11t <- quantileResidualTests(stmar11, printRes=FALSE, nsimu=20)
qrt12 <- quantileResidualTests(gmar12, printRes=FALSE, nsimu=1)
qrt23 <- quantileResidualTests(gmar23, lagsAC=c(1), lagsCH=c(3), printRes=FALSE, nsimu=1)
qrt23t <- quantileResidualTests(stmar23, lagsAC=c(3), lagsCH=c(2), printRes=FALSE, nsimu=1)
qrt12r <- quantileResidualTests(gmar12r, lagsAC=c(1, 3), lagsCH=c(1, 3), printRes=FALSE, nsimu=1)
qrt12gs <- quantileResidualTests(gstmar12, lagsAC=c(2), lagsCH=c(1), printRes=FALSE, nsimu=1)
qrt13gsr <- quantileResidualTests(gstmar13r, lagsAC=c(1), lagsCH=c(1), printRes=FALSE, nsimu=1)
qrt12gs$norm_res$testStat
qrt12gs$norm_res$testStat
qrt13gsr$norm_res$testStat
qrt11t$norm_res$testStat
qrt12$norm_res$testStat
qrt23$norm_res$testStat
qrt23t$norm_res$testStat
qrt23t$norm_res$pvalue
qrt23t$norm_res$df
qrt12r$norm_res$testStat
qrt12r$norm_res$pvalue
qrt12gs$ac_res$testStat
qrt11t$ac_res$testStat
devtools::test()
params11t <- c(0.9, 0.92, 1.01, 2.89)
params12 <- c(1.7, 0.85, 0.3, 4.12, 0.73, 1.98, 0.63)
params12gs <- c(4.13, 0.73, 1.98, 1.7, 0.85, 0.3, 0.37, 9) # M1=1, M2=1
standardErrors(simudata, p=1, M=1, params=params11t, model="StMAR")
standardErrors(logVIX, p=1, M=2, params=params12, model="GMAR")
standardErrors(simudata, p=1, M=2, params=params12, model="GMAR")
standardErrors(simudata, p=1, M=c(1, 1), params=params12gs, model="G-StMAR")
``` r
## Estimate a GMAR(1, 2) model to logarithmized VIX data
data(simudata, package="uGMAR")
fit <- fitGSMAR(data=simudata, p=1, M=2, model="GMAR")
fit
summary(fit) # Approximate standard errors in brackets
plot(fit)
get_gradient(fit) # The first order condition
get_soc(fit) # The second order condition (eigenvalues of approximated Hessian)
profile_logliks(fit) # Plot the profile log-likelihood functions
## Quantile residual diagnostics
quantileResidualPlot(fit)
diagnosticPlot(fit)
qrt <- quantileResidualTests(fit)
## Simulate a sample path from the estimated process
sim <- simulateGSMAR(fit, nsimu=10)
## Forecast future values of the process
predict(fit, n_ahead=10, pi=c(0.95, 0.8))
```
predict(fit, n_ahead=10, pi=c(0.95, 0.8))
devtools::test()
devtools::document()
params12 <- c(1.7, 0.85, 0.3, 4.12, 0.73, 1.98, 0.63)
gmar12 <- GSMAR(data=simudata, p=1, M=2, params=params12, model="GMAR")
get_ar_roots(gmar12)
devtools::document()
profile_logliks(fit12gs)
profile_logliks(fit43g)
profile_logliks(fit43)
Q
Q
Q
Q
fit13
fit43t
fit13gsr
profile_logliks(fit13gsr)
devtools::load_all()
profile_logliks(fit13gsr)
profile_logliks(fit43g)
fit34g
fit43g
?plot
devtools::document()
gsmar
plo(gsmar)
plot(gsmar)
check_gsmar()
check_gsmar
plot(gsmar$data)
check_data
ts.plot(1:10)
ts.plot(gsmar$data)
p <- gsmar$model$p
M_orig <- gsmar$model$M
make_ts <- function(dat) ts(c(rep(NA, p), dat), )
data <- gsmar$data
gsmar$data
start(gsmar$data)
start(fit43g$data)
frequency(data)
frequency(fit43g$data)
make_ts <- function(dat) ts(c(rep(NA, p), dat), start=start(data), frequency=frequency(data))
lines(make_ts(gsmar$total_cmeans), col="red")
make_ts <- function(dat) ts(dat), start=start(data), frequency=frequency(data))
make_ts <- function(dat) ts(dat, start=start(data), frequency=frequency(data))
ts.plot(gsmar$data)
lines(make_ts(gsmar$total_cmeans), col="red")
?loglikelihood_int
make_ts <- function(dat) ts(c(rep(NA, p), dat), start=start(data), frequency=frequency(data))
ts.plot(gsmar$data)
lines(make_ts(gsmar$total_cmeans), col="red")
data[1]
gsmar$total_cmeans[1]
gsmar$total_cmeans[2]
ts.plot(gsmar$data)
lines(make_ts(gsmar$total_cmeans), col="grey", lty=2)
lines(make_ts(gsmar$total_cmeans), col="grey", lty=2, lwd=2)
colpal <- grDevices::colorRampPalette(c("blue", "turquoise1", "green", "red"))(M)
mw <- gsmar$mixing_weights
gsmar$regime_cmeans
lines(make_ts(gsmar$regime_cmeans[,1]), col=colpal[1], lty=3)
plot(gsmar)
lines(make_ts(gsmar$regime_cmeans[,2]), col=colpal[2], lty=3)
mw_x_regmeans <- gsmar$mixing_weights*gsmar$regime_cmeans
mw_x_regmeans
ts.plot(gsmar$data)
lines(make_ts(gsmar$total_cmeans), col="grey", lty=2, lwd=2)
lines(make_ts(mw_x_regmeans[,1]), col=colpal[1], lty=3)
lines(make_ts(mw_x_regmeans[,2]), col=colpal[1], lty=3)
ts.plot(gsmar$data, ylim=c(0, 20))
lines(make_ts(gsmar$total_cmeans), col="grey", lty=2, lwd=2)
mw_x_regmeans <- gsmar$mixing_weights*gsmar$regime_cmeans
lines(make_ts(mw_x_regmeans[,1]), col=colpal[1], lty=3)
lines(make_ts(mw_x_regmeans[,2]), col=colpal[2], lty=3)
plot(fit43g)
as.vector(mw_x_regmeans)
ymin <- floor(min(c(as.vector(mw_x_regmeans), data)))
ts.plot(gsmar$data, ylim=c(ymin, ymax))
ymin <- floor(min(c(as.vector(mw_x_regmeans), data)))
ymax <- ceiling(max(c(as.vector(mw_x_regmeans), data)))
ts.plot(gsmar$data, ylim=c(ymin, ymax))
lines(make_ts(gsmar$total_cmeans), col="grey", lty=2, lwd=2)
colpal <- grDevices::colorRampPalette(c("blue", "turquoise1", "green", "red"))(M)
lines(make_ts(mw_x_regmeans[,1]), col=colpal[1], lty=3)
lines(make_ts(mw_x_regmeans[,2]), col=colpal[2], lty=3)
?ts.plot
plot(data, ylim=c(ymin, ymax))
lines(make_ts(gsmar$total_cmeans), col="grey", lty=2, lwd=2)
colpal <- grDevices::colorRampPalette(c("blue", "turquoise1", "green", "red"))(M)
for(i1 in 1:M) {
lines(make_ts(mw_x_regmeans[,i1]), col=colpal[i1], lty=3)
}
legend("topleft", legend=paste0("regime ", 1:M), bty="n", col=colpal, lty=1, lwd=2,
text.font=2, cex=0.65, x.intersp=0.5, y.intersp=1)
plot(data, ylim=c(ymin, ymax), gpars=list(las=1))
condmeanPlot <- function(gsmar, ...) {
check_gsmar(gsmar)
check_data(gsmar)
p <- gsmar$model$p
M_orig <- gsmar$model$M
M <- sum(M)
data <- gsmar$data
make_ts <- function(dat) ts(c(rep(NA, p), dat), start=start(data), frequency=frequency(data))
mw_x_regmeans <- gsmar$mixing_weights*gsmar$regime_cmeans
ymin <- floor(min(c(as.vector(mw_x_regmeans), data)))
ymax <- ceiling(max(c(as.vector(mw_x_regmeans), data)))
plot(data, ylim=c(ymin, ymax), ...)
lines(make_ts(gsmar$total_cmeans), col="grey", lty=2, lwd=2)
colpal <- grDevices::colorRampPalette(c("blue", "turquoise1", "green", "red"))(M)
for(i1 in 1:M) {
lines(make_ts(mw_x_regmeans[,i1]), col=colpal[i1], lty=3)
}
legend("topleft", legend=paste0("regime ", 1:M), bty="n", col=colpal, lty=1, lwd=2,
text.font=2, cex=0.65, x.intersp=0.5, y.intersp=1)
invisible(gsmar)
}
condmeanPlot(fit13)
condmeanPlot(fit13, main="lol")
devtools::load_all()
rm(condmeanPlot())
rm("condmeanPlot")
condmeanPlot(fit13)
devtools::load_all()
condmeanPlot(fit13)
devtools::load_all()
condmeanPlot(fit13)
plot(fit22c)
condmeanPlot(fit22c)
condmeanPlot(fit23t)
condmeanPlot(fit12)
condmeanPlot(fit42r)
condmeanPlot(fit13)
condmeanPlot(fit14)
Q
Q
Q
condmeanPlot(fit13gsr)
fit13gar
fit13gsr
condmeanPlot(fit23t)
condmeanPlot(fit43gst)
fit13 <- fitGSMAR(simudata, p=1, M=3, model="GMAR")
plot(fit13)
condmeanplot(fit13)
condmeanPlot(fit13)
fit13
rm(gsmar)
condmeanPlot(fit13)
fit13 <- gsmar42r
fit13 <- fitGSMAR(simudata, p=1, M=3, model="GMAR", ncalls=4)
fit13
gsmar <- fit13
p <- gsmar$model$p
M_orig <- gsmar$model$M
M <- sum(M)
devtools::load_all()
condmeanPlot(fit13)
condmeanPlot(fit43gst)
condmeanPlot(fit42g)
plot(fit42g)
mw_x_reg <- gsmar$mixing_weights*gsmar$regime_cvars
reg <- gsmar$regime_cvars
mix_x_reg <- gsmar$mixing_weights*reg
plot(data, xlab="", ylab="", main="Conditional variances")
par(new=TRUE)
make_ts <- function(dat) ts(c(rep(NA, p), dat), start=start(data), frequency=frequency(data))
total_moments <- gsmar$total_cvars
lines(make_ts(total_moments), col="grey", lty=2, lwd=2)
colpal <- grDevices::colorRampPalette(c("blue", "turquoise1", "green", "red"))(M)
plot(data, xlab="", ylab="", main="Conditional variances")
par(new=TRUE)
lines(make_ts(total_moments), col="grey", lty=2, lwd=2)
plot(data, xlab="", ylab="", main="Conditional variances")
par(new=TRUE)
plot(make_ts(total_moments), col="grey", lty=2, lwd=2)
plot(data, xlab="", ylab="", main="Conditional variances")
par(new=TRUE)
plot(make_ts(total_moments), col="grey", lty=2, lwd=2, xlab="", ylab="", yaxt="", xaxt="")
plot(make_ts(total_moments), col="grey", lty=2, lwd=2, xlab="", ylab="", yaxt="n", xaxt="n")
par(mar=c(2.6, 2.6, 2.6, 2.6))
make_ts <- function(dat) ts(c(rep(NA, p), dat), start=start(data), frequency=frequency(data))
plot(data, xlab="", ylab="", main="Conditional variances")
par(new=TRUE)
plot(make_ts(total_moments), col="grey", lty=2, lwd=2, xlab="", ylab="", yaxt="n", xaxt="n")
?axis
axis(side=4)
axis(side=4, col="grey", lwd=2)
colpal <- grDevices::colorRampPalette(c("blue", "turquoise1", "green", "red"))(M)
for(i1 in 1:M) {
lines(make_ts(mw_x_reg[,i1]), col=colpal[i1], lty=3)
}
ymin <- floor(min(c(as.vector(mw_x_reg), data)))
ymax <- ceiling(max(c(as.vector(mw_x_reg), data)))
plot(data, xlab="", ylab="", main="Conditional variances")
par(new=TRUE)
plot(make_ts(total_moments), ylim=c(ymin, ymax), col="grey", lty=2, lwd=2, xlab="", ylab="", yaxt="n", xaxt="n")
axis(side=4, col="grey", lwd=2)
if(which_plot == "mean") {
plot(data, ylim=c(ymin, ymax), xlab="", ylab="", main="Conditional means")
lines(make_ts(total_moments), col="grey", lty=2, lwd=2)
} else {
plot(data, xlab="", ylab="", main="Conditional variances")
par(new=TRUE)
plot(make_ts(total_moments), ylim=c(ymin, ymax), col="grey", lty=2, lwd=2, xlab="", ylab="", yaxt="n", xaxt="n")
axis(side=4, col="grey", lwd=2)
}
colpal <- grDevices::colorRampPalette(c("blue", "turquoise1", "green", "red"))(M)
for(i1 in 1:M) {
lines(make_ts(mw_x_reg[,i1]), col=colpal[i1], lty=3)
}
legend("topleft", legend=paste0("regime ", 1:M), bty="n", col=colpal, lty=1, lwd=2,
text.font=2, cex=0.65, x.intersp=0.5, y.intersp=1)
min(mix_x_reg)
vals <- mw_x_reg
old_par <- par(no.readonly=TRUE)
on.exit(par(old_par))
par(mar=c(2.6, 2.6, 2.6, 2.6))
ymin <- floor(min(vals))
ymax <- ceiling(max(vals))
make_ts <- function(dat) ts(c(rep(NA, p), dat), start=start(data), frequency=frequency(data))
if(which_plot == "mean") {
plot(data, ylim=c(ymin, ymax), xlab="", ylab="", main="Conditional means")
lines(make_ts(total_moments), col="grey", lty=2, lwd=2)
} else {
plot(data, xlab="", ylab="", main="Conditional variances")
par(new=TRUE)
plot(make_ts(total_moments), ylim=c(ymin, ymax), col="grey", lty=2, lwd=2, xlab="", ylab="", yaxt="n", xaxt="n")
axis(side=4, col="grey", lwd=2)
}
plot(data, xlab="", ylab="", main="Conditional variances")
par(new=TRUE)
plot(make_ts(total_moments), ylim=c(ymin, ymax), col="grey", lty=2, lwd=2, xlab="", ylab="", yaxt="n", xaxt="n")
axis(side=4, col="grey", lwd=2)
if(which_plot == "mean") {
plot(data, ylim=c(ymin, ymax), xlab="", ylab="", main="Conditional means")
lines(make_ts(total_moments), col="grey", lty=2, lwd=2)
} else {
plot(data, xlab="", ylab="", main="Conditional variances")
par(new=TRUE)
plot(make_ts(total_moments), ylim=c(ymin, ymax), col="grey", lty=2, lwd=2, xlab="", ylab="", yaxt="n", xaxt="n")
axis(side=4, col="grey", lwd=2)
}
colpal <- grDevices::colorRampPalette(c("blue", "turquoise1", "green", "red"))(M)
for(i1 in 1:M) {
lines(make_ts(mw_x_reg[,i1]), col=colpal[i1], lty=3)
}
legend("topleft", legend=paste0("regime ", 1:M), bty="n", col=colpal, lty=1, lwd=2,
text.font=2, cex=0.65, x.intersp=0.5, y.intersp=1)
legend("topleft", legend=c("total", paste0("regime ", 1:M)), bty="n", col=c("grey", colpal),
lty=c(2, rep(3, M)), lwd=2, text.font=2, cex=0.65, x.intersp=0.5, y.intersp=1)
devtools::load_all()
condmeanPlot(fit12, which_plot="var")
condmeanPlot(fit12, which_plot="variance")
devtools::load_all()
condmomentPlot(fit12, "variance")
condmomentPlot(fit13, "variance")
condmomentPlot(fit42, "variance")
gsmar <- fit42
p <- gsmar$model$p
M_orig <- gsmar$model$M
M <- sum(M_orig)
data <- gsmar$data
total_moments <- gsmar$total_cvars
reg <- gsmar$regime_cvars
vals <- mw_x_reg
mix_x_reg <- gsmar$mixing_weights*reg
par(mar=c(2.6, 2.6, 2.6, 2.6))
ymin <- floor(min(vals))
ymax <- ceiling(max(vals))
make_ts <- function(dat) ts(c(rep(NA, p), dat), start=start(data), frequency=frequency(data))
plot(data, xlab="", ylab="", main="Conditional variances")
par(new=TRUE)
plot(make_ts(total_moments), ylim=c(ymin, ymax), col="grey", lty=2, lwd=2, xlab="", ylab="", yaxt="n", xaxt="n")
axis(side=4, col="grey", lwd=2)
if(which_plot == "mean") {
plot(data, ylim=c(ymin, ymax), xlab="", ylab="", main="Conditional means")
lines(make_ts(total_moments), col="grey", lty=2, lwd=2)
} else {
plot(data, xlab="", ylab="", main="Conditional variances")
par(new=TRUE)
plot(make_ts(total_moments), ylim=c(ymin, ymax), col="grey", lty=2, lwd=2, xlab="", ylab="", yaxt="n", xaxt="n")
axis(side=4, col="grey", lwd=2)
}
colpal <- grDevices::colorRampPalette(c("blue", "turquoise1", "green", "red"))(M)
for(i1 in 1:M) {
lines(make_ts(mw_x_reg[,i1]), col=colpal[i1], lty=3)
}
mw_x_reg[,i1]
gsmar$mixing_weights
reg
devtools::load_all()
condmomentPlot(fit42, "variance")
devtools::load_all()
condmomentPlot(fit42, "variance")
condmomentPlot(fit42, "mean")
condmomentPlot(fit42g, "mean")
condmomentPlot(fit42gs, "mean")
Q
Q
Q
Q
condmomentPlot(fit42t, "mean")
Q
Q
Q
Q
Q
Q
condmomentPlot(fit43t2, "mean")
condmomentPlot(fit43t2, "variance")
condmeanPlot(fit12)
condmeanPlot(fit42r)
condmeanPlot(fit42g)
condmomentPlot(fit12, which_moment="mean")
devtools::load_all()
devtools::document()
devtools::load_all()
condmomentPlot(fit12, which_moment="mean")
condmomentPlot(fit12, which_moment="variance")
condmomentPlot(fit42r, which_moment="mean")
condmomentPlot(fit42r, which_moment="variance")
condmomentPlot(fit42g, which_moment="mean")
condmomentPlot(fit42g, which_moment="variance")
devtools::test()
devtools::load_all()
condmomentPlot(fit12, which_moment="mean")
condmomentPlot(fit12, which_moment="variance")
devtools::document()
fit12 <- fitGSMAR(simudata, p=1, M=2, model="GMAR")
condmomentPlot(fit12, which_moment="mean")
condmomentPlot(fit12, which_moment="variance")
fit42r <- fitGSMAR(T10Y1Y, p=4, M=2, model="StMAR", restricted=TRUE, ncalls=2)
condmomentPlot(fit42r, which_moment="mean")
condmomentPlot(fit42r, which_moment="variance")
fit42g <- fitGSMAR(T10Y1Y, p=4, M=c(1, 1), model="G-StMAR", ncalls=2)
condmomentPlot(fit42g, which_moment="mean")
condmomentPlot(fit42g, which_moment="variance")
devtools::build()
params12 <- c(1.7, 0.85, 0.3, 4.12, 0.73, 1.98, 0.63)
gmar12 <- GSMAR(data=simudata, p=1, M=2, params=params12, model="GMAR")
params11t <- c(0.9, 0.92, 1.01, 2.89)
stmar11 <- GSMAR(data=simudata, p=1, M=1, params=params11t, model="StMAR")
params12gs <- c(4.13, 0.73, 1.98, 1.7, 0.85, 0.3, 0.37, 9) # M1=1, M2=1
gstmar12 <- GSMAR(data=simudata, p=1, M=c(1, 1), params=params12gs, model="G-StMAR")
gmar12it <- iterate_more(gmar12, calc_std_errors=FALSE, maxit=1)
stmar11it <- iterate_more(stmar11, calc_std_errors=FALSE, maxit=1)
gstmar12it <- iterate_more(gstmar12, calc_std_errors=FALSE, maxit=1)
gmar12it$params
devtools::build()
devtools::build()
devtools::build()
install.packages("gsl")
install.packages("Brobdingnag")
install.packages("parallel")
install.packages("pbapply")
install.packages("testthat")
install.packages("knitr")
install.packages("rmarkdown")
install.packages("devtools")
devtools::document()
install.packages("roxygen2")
install.packages("roxygen2")
pkgbuild::has_build_tools()
install.packages("devtools")
setwd("~/uGMAR")
devtools::test()
?suppressMessages
suppressMessages(1+1)
devtools::load_all()
params12 <- c(1.7, 0.85, 0.3, 4.12, 0.73, 1.98, 0.63)
gmar12 <- GSMAR(data=simudata, p=1, M=2, params=params12, model="GMAR")
iterate_more0 <- function(gsmar) suppressMessages(iterate_more(gsmar, calc_std_errors=FALSE, maxit=1))
rm(iterate_more0())
rm(iterate_more0
)
iterate_more(gmar12, calc_std_errors=FALSE, maxit=1)
devtools::test()
fitGSMAR(simudata, p=1, M=2, model="GMAR", ncalls=1, ncores=1, maxit=1, seeds=1, printRes=FALSE)
suppressMessages(fitGSMAR(simudata, p=1, M=2, model="GMAR", ncalls=1, ncores=1, maxit=1, seeds=1, printRes=FALSE))
suppressMessages(fitGSMAR(simudata, p=1, M=2, model="GMAR", ncalls=1, ncores=1, maxit=1, seeds=1, printRes=FALSE, ngen=1))
suppressMessages(fitGSMAR(simudata, p=1, M=2, model="GMAR", ncalls=1, ncores=1, maxit=1, seeds=1, printRes=FALSE, ngen=2))
devtools::test()
devtools::load_all()
devtools::test()
devtools::load_all()
devtools::test()
devtools::test()
tmp <- random_regime(p=4, meanscale=1:2, sigmascale=3, forcestat=TRUE)
tmp
tmp <- regime_distance(1:3, 1:3)
tmp
tmp <- regime_distance(1:3, 2:4)
tmp
?smart_individual_int
?smartIndividual_int
devtools::test()
devtools::test()
devtools::test()
fit12 <- fitGSMAR(simudata, p=1, M=2, model="GMAR")
summary(fit12)
plot(fit12)
profile_logliks(fit12)
devtools::document()
86918.15 - 8645.07
86918.15 - 86456.07
86456.07*0.4
86456.07*0.6
gstmar42r <- GSMAR(p=4, M=c(1, 1), params=params42gsr, model="G-StMAR", restricted=TRUE)
setwd("~/uGMAR")
devtools::load_all()
gstmar42r <- GSMAR(p=4, M=c(1, 1), params=params42gsr, model="G-StMAR", restricted=TRUE)
params42gsr <- c(0.11, 0.03, 1.27, -0.39, 0.24, -0.17, 0.03, 1.01, 0.3, 2.03)
gstmar42r <- GSMAR(p=4, M=c(1, 1), params=params42gsr, model="G-StMAR", restricted=TRUE)
gstmar42r$data
gstmar42r <- add_data(data=T10Y1Y, gstmar42r)
gstmar42r$data
gstmar42r <- GSMAR(data=T10Y1Y, p=4, M=c(1, 1), params=params42gsr, model="G-StMAR", restricted=TRUE)
gstmar42r2 <- swap_parametrization(gstmar42r)
gstmar42r2$params
fit11 <- fitGSMAR(T10Y1Y, 1, 1, model="StMAR", ncalls=2, ncores=1, maxit=1, seeds=1:2, ngen=1)
fit11 <- suppressMessages(fitGSMAR(T10Y1Y, 1, 1, model="StMAR", ncalls=2, ncores=1, maxit=1, seeds=1:2, ngen=1))
fit11 <- suppressMessages(fitGSMAR(T10Y1Y, 1, 1, model="StMAR", ncalls=2, ncores=1, maxit=1, seeds=1:2, printRes=FALSE, ngen=1))
fit11$all_logliks
devtools::test()
devtools::test()
devtools::test()
devtools::document()
setwd("~/uGMAR")
devtools::document()
devtools::document()
setwd("~/uGMAR")
devtools::document()

U <- diag(1, nrow=p, ncol=p)
V <- diag(ARcoefs[p], nrow=p, ncol=p)
for(i2 in 1:(p - 1)) {
U[(i2 + 1):p, i2] <- -ARcoefs[1:(p - i2)]
V[(i2 + 1):p, i2] <- rev(ARcoefs[i2:(p - 1)])
}
invG[, , i1] <- (crossprod(U, U) - crossprod(V, V))/sigmas[i1]
matProd[, i1] <- rowSums((Y - mu[i1]*rep(1, p))%*%invG[, , i1]*(Y - mu[i1]*rep(1, p)))
}
}
# Calculate the multivariate normal or student's t values (KMS 2015, eq.(7) and MPS 2018, Theorem 1) in log for each vector y_t and for each m=1,..,M.
# First row for initial values \bm{y}_0 (as denoted by KMS 2015) and i:th row for \bm{y}_(i-1). First column for component m=1 and j:th column for m=j.
logmv_values <- matrix(nrow=(n_obs - p + 1), ncol=M)
if(model == "GMAR" | model == "G-StMAR") { # Multinormals
for(i1 in 1:M1) {
detG <- 1/det(as.matrix(invG[, , i1]))
logmv_values[,i1] <- -0.5*p*log(2*base::pi) - 0.5*log(detG) - 0.5*matProd[,i1]
}
}
if(model == "StMAR" | model == "G-StMAR") { # Multistudents
for(i1 in (M1 + 1):M) {
detG <- 1/det(as.matrix(invG[, , i1]))
logC <- lgamma(0.5*(p + dfs[i1 - M1])) - 0.5*p*log(base::pi) - 0.5*p*log(dfs[i1 - M1] - 2) - lgamma(0.5*dfs[i1 - M1])
logmv_values[,i1] <- logC - 0.5*log(detG) - 0.5*(p + dfs[i1 - M1])*log(1 + matProd[,i1]/(dfs[i1 - M1] - 2))
}
}
# Calculate the mixing weights alpha_mt (KMS 2015, eq.(8) and MPS 2018, eq.(11)).
# First row for t=1, second for t=2, and i:th for t=i. First column for m=1, second for m=2 and j:th column for m=j.
logmv_values0 <- logmv_values[1:(n_obs - p),]
if(!is.matrix(logmv_values0)) logmv_values0 <- as.matrix(logmv_values0)
if(is.null(alpha_mt)) {
if(M == 1) { # No need to do calculations is only one regime.
alpha_mt <- as.matrix(rep(1, nrow(logmv_values0)))
} else if(any(logmv_values0 < epsilon)) { # Close to zero values handled with package Brobdingnag if needed.
numerators <- lapply(1:M, function(i1) alphas[i1]*exp(Brobdingnag::as.brob(logmv_values0[,i1]))) # alphas[i1]*Brobdingnag::as.brob(exp(1))^logmv_values0[,i1]
denominator <- Reduce("+", numerators) # For all t=0,...,T
alpha_mt <- vapply(1:M, function(i1) as.numeric(numerators[[i1]]/denominator), numeric(nrow(logmv_values0)))
} else {
mv_values0 <- exp(logmv_values0)
denominator <- as.vector(mv_values0%*%alphas)
alpha_mt <- (mv_values0/denominator)%*%diag(alphas)
}
return(alpha_mt)
}
# Calculate the conditional means mu_mt (KMS 2015, eq.(2), MPS 2018, eq.(5)). First row for t=1, second for t=2 etc. First column for m=1,
# second column for m=2 etc.
mu_mt <- t(pars[1,] + t(Y[-nrow(Y),]%*%pars[2:(p + 1), , drop=FALSE]))
# Calculate "the second term" of the log-likelihood (KMS 2015, eq.(12)-(13), MPS 2018, eq.(14)-(15)) or quantile residuals
Y2 <- Y[2:nrow(Y), 1] # Only the first column and rows 2...T are needed
# GMAR type components
if(model == "GMAR" | model == "G-StMAR") {
invsqrt_sigmasM1 <- sigmas[1:M1]^(-1/2) # M1 = M for the GMAR model
smat <- diag(x=invsqrt_sigmasM1, nrow=length(invsqrt_sigmasM1), ncol=length(invsqrt_sigmasM1))
lt_tmpM1 <- alpha_mt[,1:M1]*dnorm((Y2 - mu_mt[,1:M1])%*%smat)%*%smat
}
# StMAR type components
if(model == "StMAR" | model == "G-StMAR") {
sigmasM2 <- sigmas[(M1 + 1):M] # M1 = 0 and M2 = M for the StMAR model
matProd0 <- matProd[1:(n_obs - p), (M1 + 1):M] # The last row is not needed because sigma_t uses y_{t-1}
smat <- diag(x=sigmasM2, nrow=length(sigmasM2), ncol=length(sigmasM2))
dfmat1 <- diag(x=1/(dfs - 2 + p), nrow=length(dfs), ncol=length(dfs))
dfmat2 <- diag(x=dfs + p - 2, nrow=length(dfs), ncol=length(dfs))
sigma_mt <- crossprod(dfs - 2 + t(matProd0), dfmat1)%*%diag(x=sigmasM2, nrow=length(sigmasM2), ncol=length(sigmasM2))
lt_tmpM2 <- alpha_mt[,(M1 + 1):M]*t(exp(lgamma(0.5*(1 + dfs + p)) - lgamma(0.5*(dfs + p)))/sqrt(base::pi*(dfs + p - 2))/t(sqrt(sigma_mt)))*
t(t(1 + ((Y2 - mu_mt[,(M1 + 1):M])^2)/(sigma_mt%*%dfmat2))^(-0.5*(1 + dfs + p)))
}
if(model == "GMAR") {
lt_tmp <- as.matrix(lt_tmpM1)
} else if(model == "StMAR") {
lt_tmp <- as.matrix(lt_tmpM2)
} else { # model == "G-StMAR
lt_tmp <- as.matrix(cbind(lt_tmpM1, lt_tmpM2))
}
l_t <- rowSums(lt_tmp)
sum(log(l_t))
}
EM_estimation <- function(data, p, M, model=c("GMAR", "StMAR", "G-StMAR"), restricted=FALSE, constraints=NULL,
conditional=TRUE, parametrization=c("mean"), init_params, n_iterations=10, SANNit=1000,
NEWTONit=100) {
minval <- get_minval(data)
if(missing(init_params)) {
nattempts <- 100
for(i1 in 1:nattempts) {
init_params <- randomIndividual_int(p=p, M=M, model=model, restricted=restricted, constraints=constraints,
meanscale=c(mean(data), sd(data)), sigmascale=10, forcestat=TRUE)
init_loks <- loglikelihood_int(data=data, p=p, M=M, params=init_params, model=model, restricted=restricted,
constraints=constraints, conditional=conditional, parametrization="mean",
boundaries=TRUE, checks=FALSE, to_return="loglik", minval=minval)
cat(paste("Initlok: ", init_loks), "\n")
if(init_loks > minval) break
if(i1 == nattempts) stop("Failed to create initial population with good enough individuals. Consider setting up the initial population by hand using the argument 'initpop' of the function 'GAfit'.")
}
#  init_params <- randomIndividual_int(p=p, M=M, model=model, restricted=restricted, constraints=constraints,
#                                      meanscale=c(mean(data), sd(data)), sigmascale=10, forcestat=TRUE)
}
all_estimates <- matrix(nrow=length(init_params), ncol=n_iterations)
for(i1 in 1:n_iterations) {
if(i1 == 1) {
pars_to_use <- init_params
} else {
pars_to_use <- all_estimates[, i1 - 1]
}
# E-step
alpha_mt <- E_step(data=data, p=p, M=M, model=model, params=pars_to_use, restricted=restricted, constraints=constraints)
cat("Loglik after E-step:", loglikelihood_EM(data, p=p, M=M, params=pars_to_use, model=model, alpha_mt=alpha_mt), "\n")
# M-step
estimate <- M_step(data=data, p=p, M=M, model=model, restricted=restricted, constraints=constraints,
alpha_mt=alpha_mt, init_params=pars_to_use, SANNit=SANNit, NEWTONit=NEWTONit)
# Save and print results
all_estimates[, i1] <- estimate
cat(paste0("Round: ", i1, ", loglik: ", uGMAR::loglikelihood_int(data=data, p=p, M=M, params=estimate, model=model, restricted=restricted,
constraints=constraints, parametrization="mean", minval=minval)), "\n")
}
estimate
}
fit12_EM <- EM_estimation(data=logVIX, p=1, M=2, model="GMAR")
EM_estimation <- function(data, p, M, model=c("GMAR", "StMAR", "G-StMAR"), restricted=FALSE, constraints=NULL,
conditional=TRUE, parametrization=c("mean"), init_params, n_iterations=10, SANNit=1000,
NEWTONit=100) {
minval <- get_minval(data)
if(missing(init_params)) {
nattempts <- 100
for(i1 in 1:nattempts) {
init_params <- randomIndividual_int(p=p, M=M, model=model, restricted=restricted, constraints=constraints,
meanscale=c(mean(data), sd(data)), sigmascale=10, forcestat=TRUE)
init_loks <- loglikelihood_int(data=data, p=p, M=M, params=init_params, model=model, restricted=restricted,
constraints=constraints, conditional=conditional, parametrization="mean",
boundaries=TRUE, checks=FALSE, to_return="loglik", minval=minval)
cat(paste("Initlok: ", init_loks), "\n")
if(init_loks > minval) break
if(i1 == nattempts) stop("Failed to create initial population with good enough individuals. Consider setting up the initial population by hand using the argument 'initpop' of the function 'GAfit'.")
}
#  init_params <- randomIndividual_int(p=p, M=M, model=model, restricted=restricted, constraints=constraints,
#                                      meanscale=c(mean(data), sd(data)), sigmascale=10, forcestat=TRUE)
}
all_estimates <- matrix(nrow=length(init_params), ncol=n_iterations)
for(i1 in 1:n_iterations) {
if(i1 == 1) {
pars_to_use <- init_params
} else {
pars_to_use <- all_estimates[, i1 - 1]
}
# E-step
alpha_mt <- E_step(data=data, p=p, M=M, model=model, params=pars_to_use, restricted=restricted, constraints=constraints)
# M-step
estimate <- M_step(data=data, p=p, M=M, model=model, restricted=restricted, constraints=constraints,
alpha_mt=alpha_mt, init_params=pars_to_use, SANNit=SANNit, NEWTONit=NEWTONit)
# Save and print results
all_estimates[, i1] <- estimate
cat(paste0("Round: ", i1, ", loglik: ", uGMAR::loglikelihood_int(data=data, p=p, M=M, params=estimate, model=model, restricted=restricted,
constraints=constraints, parametrization="mean", minval=minval)), "\n")
}
estimate
}
fit12_EM <- EM_estimation(data=logVIX, p=1, M=2, model="GMAR", SANNit=100)
fit12_EM <- EM_estimation(data=logVIX, p=1, M=2, model="GMAR", SANNit=1000)
fit12_EM <- EM_estimation(data=logVIX, p=1, M=2, model="GMAR", SANNit=1000)
fit12_EM <- EM_estimation(data=logVIX, p=1, M=2, model="GMAR", SANNit=1000)
fit12_EM <- EM_estimation(data=logVIX, p=1, M=2, model="GMAR", SANNit=1000)
fit12_EM <- EM_estimation(data=logVIX, p=1, M=2, model="GMAR", SANNit=1000)
fit12_EM <- EM_estimation(data=logVIX, p=1, M=2, model="GMAR", SANNit=10000, n_iterations=5)
fit12 <- fitGSMAR(data=logVIX, p=1, M=2, model="GMAR", ncalls=4)
library(readr)
VIXCLS_1_ <- read_csv("C:/Users/saviviro/Downloads/VIXCLS (1).csv")
View(VIXCLS_1_)
library(readr)
VIXdaily <- read_csv("C:/Users/saviviro/Downloads/VIXCLS (1).csv")
VIX <- as.numeric(VIX)
VIX
VIXd <- read_csv("C:/Users/saviviro/Downloads/VIXCLS (1).csv")
VIXd <- as.numeric(VIXd)
VIXd <- as.numeric(VIXd[,1])
VIXd[,1]
VIXd[,2]
VIXd <- as.numeric(VIXd[,2])
VIXd[[2]]
VIXd <- as.numeric(VIXd[[2]])
VIXd <- VIXd[!is.na(VIXd)]
VIXd <- ts(VIXd[!is.na(VIXd)], from=c(1990, 2), frequency=252)
?ts
VIXd <- as.numeric(VIXd[[2]])
VIXd <- read_csv("C:/Users/saviviro/Downloads/VIXCLS (1).csv")
VIXd <- as.numeric(VIXd[[2]])
VIXd <- ts(VIXd[!is.na(VIXd)], start=c(1990, 2), frequency=252)
plot(VIXd)
acf(VIXd)
acf(VIXd^2)
pacf(VIXd)
pacf(VIXd^2)
fit51 <- fitGSMAR(VIXd, p=5, M=1, model="StMAR", conditional=FALSE, ncalls=4)
diagnosticPlot(fit51)
fit52 <- fitGSMAR(VIXd, p=5, M=1, model="StMAR", conditional=FALSE, ncalls=12)
fit52 <- fitGSMAR(VIXd, p=5, M=1, model="StMAR", conditional=FALSE, ncalls=12, ncores=3)
summary(fit52)
fit52 <- fitGSMAR(VIXd, p=5, M=2, model="StMAR", conditional=FALSE, ncalls=12, ncores=3)
summary(fit52)
plot(fit52)
diagnosticPlot(fit52)
OIL <- read_csv("C:/Users/saviviro/Downloads/OVXCLS.csv")
VIXd <- as.numeric(OIL[[2]])
OIL <- read_csv("C:/Users/saviviro/Downloads/OVXCLS.csv")
OIL <- as.numeric(OIL[[2]])
VIXd <- read_csv("C:/Users/saviviro/Downloads/VIXCLS (1).csv")
VIXd <- as.numeric(VIXd[[2]])
VIXd <- ts(VIXd[!is.na(VIXd)], start=c(1990, 2), frequency=252)
OIL <- read_csv("C:/Users/saviviro/Downloads/OVXCLS (1).csv")
OIL <- as.numeric(OIL[[2]])
OIL <- ts(OIL[!is.na(OIL)], start=c(2008, 1), frequency=252)
plot(OIL)
acf(OIL)
pacf(OIL)
pacf(OIL^2)
acf(OIL^2)
plot(denisity(OIL))
plot(density(OIL))
length(OIL)
fit22 <- fitGSMAR(OIL, p=2, M=2, model="StMAR", conditional=FALSE, ncalls=12, ncores=3)
summary(fit22)
plot(fit22)
mean(OIL)
diagnosticPlot(fit22)
quanileresidulPlot(fit22)
quanileresidualPlot(fit22)
qresidualPlot(fit22)
quanileResidualPlot(fit22)
quantileResidualPlot(fit22)
fit23 <- fitGSMAR(OIL, p=2, M=3, model="StMAR", conditional=FALSE, ncalls=12, ncores=3)
fit23 <- fitGSMAR(OIL, p=2, M=3, model="StMAR", conditional=FALSE, ncalls=15, ncores=3)
summary(fit23)
plot(fit23)
Diagnosticlot(fit23)
DiagnosticPlot(fit23)
diagnosticPlot(fit23)
fit24 <- fitGSMAR(OIL, p=2, M=4, model="GMAR", conditional=FALSE, ncalls=12, ncores=3)
summary(fot42)
summary(fit42)
summary(fit24)
plot(fit24)
diagnosticPlot(fit24)
logVIXd <- log(VIXd)
plot(logVIXd)
pacf(logVIXd)
pacf(logVIXd^2)
acf(logVIXd^2)
acf(logVIXd)
pacf(logVIXd)
fit12 <- fitGSMAR(VIXd, p=1, M=2, model="GMAR", conditional=FALSE, ncalls=12, ncores=3)
summary(fit12)
plot(fit12)
diagnosticPlot(fit12)
VIXd <- read_csv("C:/Users/saviviro/Downloads/VIXCLS (2).csv")
VIXd <- as.numeric(VIXd[[2]])
VIXd <- ts(VIXd[!is.na(VIXd)], start=c(2000, 1), frequency=252)
logVIXd <- log(VIXd)
plot(logVIXd)
pacf(logVIXd)
pacf(logVIXd^2)
fit12 <- fitGSMAR(logVIXd, p=1, M=2, model="GMAR", conditional=FALSE, ncalls=12, ncores=3)
length(logVIXd)
summary(fit12)
VIXd <- read_csv("C:/Users/saviviro/Downloads/VIXCLS (1).csv")
VIXd <- as.numeric(VIXd[[2]])
VIXd <- ts(VIXd[!is.na(VIXd)], start=c(2000, 1), frequency=252)
logVIXd <- log(VIXd)
plot(logVIXd)
length(logVIXd)
pacf(logVIXd^2)
pacf(logVIXd)
fit12 <- fitGSMAR(logVIXd, p=1, M=2, model="GMAR", conditional=FALSE, ncalls=12, ncores=3)
summary(fit12)
plot(fit12)
diagnosticPlot(fit12)
fit12t <- fitGSMAR(logVIXd, p=1, M=2, model="StMAR", conditional=FALSE, ncalls=12, ncores=3)
plot(fit12t)
diagnosticPlot(fit12t)
summary(fit12t)
fit32 <- fitGSMAR(logVIXd, p=3, M=2, model="GMAR", conditional=FALSE, ncalls=12, ncores=3)
summary(fit32)
plot(fit32)
diagnosticPlot(fit32)
fit32t <- fitGSMAR(logVIXd, p=3, M=2, model="StMAR", conditional=FALSE, ncalls=12, ncores=3)
summary(fit32t)
plot(fit32t)
diagnosticPlot(fit32t)
fit33 <- fitGSMAR(logVIXd, p=3, M=3, model="GMAR", conditional=FALSE, ncalls=12, ncores=3)
summary(fit33)
diagnosticPlot(fit33)
plot(fit33)
fit33t <- fitGSMAR(logVIXd, p=3, M=3, model="StMAR", conditional=FALSE, ncalls=12, ncores=3)
summary(fit33t)
plot(fit33t)
diagnosticPlot(fit33t)
quantileResidualPlot(fit33t)
fit53t <- fitGSMAR(logVIXd, p=3, M=3, model="StMAR", conditional=FALSE, ncalls=12, ncores=3)
summary(fit53t)
OIL <- read_csv("C:/Users/saviviro/Downloads/OVXCLS (1).csv")
OIL <- as.numeric(OIL[[2]])
logOIL <- log(OIL)
plot(logOIL)
OIL <- read_csv("C:/Users/saviviro/Downloads/OVXCLS (1).csv")
OIL <- as.numeric(OIL[[2]])
OIL <- ts(OIL[!is.na(OIL)], start=c(2008, 1), frequency=252)
logOIL <- log(OIL)
OIL <- read_csv("C:/Users/saviviro/Downloads/OVXCLS (1).csv")
fit53t <- fitGSMAR(logVIXd, p=5, M=3, model="StMAR", conditional=FALSE, ncalls=12, ncores=3)
summary(fit53t)
plot(fit53t)
diagnosticPlot(fit53t)
T10Y3M <- read_csv("C:/Users/saviviro/Downloads/T10Y3MM (1).csv")
T10Y3M[[2]]
T10Y3M <- as.numeric(T10Y3M[[2]])
anYNA(T10Y3M)
anyNA(T10Y3M)
T10Y3M <- ts(T10Y3M, start=c(1982, 1), frequency=12)
plot(T10Y3M)
acf(T10Y3M)
acf(T10Y3M^2)
pacf(T10Y3M^2)
pacf(T10Y3M)
fit31 <- fitGSMAR(T10Y3M, p=3, M=1, model="GMAR", conditional=FALSE, ncalls=3, ncores=3)
fit31
diagnosticPlot(fit31)
fit31t <- fitGSMAR(T10Y3M, p=3, M=1, model="StMAR", conditional=FALSE, ncalls=3, ncores=3)
summary(fit31)
diagnosticPlot(fit31)
diagnosticPlot(fit31t)
fit32 <- fitGSMAR(T10Y3M, p=3, M=2, model="GMAR", conditional=FALSE, ncalls=3, ncores=3)
fit32
diagnosticPlot(fit32)
fit32t <- fitGSMAR(T10Y3M, p=3, M=2, model="StMAR", conditional=FALSE, ncalls=12, ncores=3)
summary(fit32t)
plot(fit32t)
fit32t$all_logliks
alt_gsmar(fit32t, which_largest = 2)
alt_gsmar(fit32t, which_largest = 3)
source('//ad.helsinki.fi/home/s/saviviro/Desktop/uGMARartikkeli/reproduction_script.R', echo=TRUE)
fit32t2 <- alt_gsmar(fit32t, which_largest = 3)
plot(fit32t2)
diagnosticPlot(fit32t2)
fit42t <- fitGSMAR(T10Y3M, p=4, M=2, model="StMAR", conditional=FALSE, ncalls=12, ncores=3)
summary(fit42t)
plot(fit42t)
fit42t$all_logliks
alt_gsmar(fit42t, which_largest=2)
summary(alt_gsmar(fit42t, which_largest=2))
summary(alt_gsmar(fit42t, which_largest=3))
fit42t2 <- alt_gsmar(fit42t, which_largest=3)
plot(fit42t2)
diagnosticPlot(fit42t2)
quantileResidualTests(fit42t2, lagsAC=7, nsimu=1)
quantileResidualTests(fit42t2, lagsAC=8, nsimu=1)
quantileResidualTests(fit42t2, lagsAC=12, nsimu=1)
fit52t <- fitGSMAR(T10Y3M, p=5, M=2, model="StMAR", conditional=FALSE, ncalls=12, ncores=3)
summary(fit52t)
summary(alt_gsmar(fit52t, which_largest=2))
summary(alt_gsmar(fit52t, which_largest=3))
summary(alt_gsmar(fit52t, which_largest=4))
summary(alt_gsmar(fit52t, which_largest=5))
summary(alt_gsmar(fit52t, which_largest=6))
fit52t2 <- alt_gsmar(fit52t, which_largest=6)
plot(fit52t2)
diagnosticPlot(fit52t2)
quantileResidualTests(fit52t2, lagsAC=12, nsimu=1)
quantileResidualTests(fit52t2, lagsAC=5, nsimu=1)
quantileResidualTests(fit52t2, lagsAC=4, nsimu=1)
quantileResidualTests(fit52t2, lagsAC=3, nsimu=1)
fit33 <- fitGSMAR(T10Y3M, p=3, M=3, model="GMAR", conditonal=FALSE, ncalls=12, ncores=3)
fit33 <- fitGSMAR(T10Y3M, p=3, M=3, model="GMAR", conditional=FALSE, ncalls=12, ncores=3)
plot(fit33)
diagnosticPlot(fit33)
diagnosticPlot(fit52t2)
fit62t <- fitGSMAR(T10Y3M, p=6, M=2, model="StMAR", conditional=FALSE, ncalls=12, ncores=3)
summary(fit62t)
summary(alt_gsmar(fit62t, which_largest=2))
fit62t <- alt_gsmar(fit62t, which_largest=2)
plot(fit62t)
diagnosticPlot(fit62t)
fit72t <- fitGSMAR(T10Y3M, p=7, M=2, model="StMAR", conditional=FALSE, ncalls=12, ncores=3)
fit72t
summary(fit72t)
plot(fit72t)
diagnosticPlot(fit72t)
fit82t <- fitGSMAR(T10Y3M, p=8, M=2, model="StMAR", conditional=FALSE, ncalls=12, ncores=3)
summary(fit82t)
summary(alt_gsmar(fit82t, which_largest=2))
summary(alt_gsmar(fit82t, which_largest=3))
summary(alt_gsmar(fit82t, which_largest=4))
fit82t2 <- alt_gsmar(fit82t, which_largest=4)
plot(fit82t2)
diagnosticPlot(fit82t2)
quantileResidualTests(fit82t2)
pacf(T10Y3M)
pacf(T10Y3M^2)
fit92t <- fitGSMAR(T10Y3M, p=9, M=2, model="StMAR", conditional=FALSE, ncalls=12, ncores=3)
summary(fit92t)
plot(fit92t)
summary(alt_gsmar(fit92t, which_largest = 2))
fit92t2 <- alt_gsmar(fit92t, which_largest = 2)
plot(fit92t2)
diagnosticPlot(fit92t2)
quantileResidualTests(fit92t2)
T10Y2Y <- read_csv("C:/Users/saviviro/Downloads/T10Y2YM.csv")
T10Y2Y <- as.numeric(T10Y2Y[[2]])
T10Y2Y <- ts(T10Y2Y, start=c(1976, 6), frequency=12)
plot(T10Y2Y)
acf(T10Y2Y)
acf(T10Y2Y^2)
pacf(T10Y2Y)
pacf(T10Y2Y^2)
fit42t <- fitGSMAR(T10Y2Y, p=4, M=2, model="StMAR", conditional=FALSE, ncalls=12, ncores=3)
summary(fit42t)
plot(fit42t)
diagnosticPlot(fit42t)
plot(fit42t2)
quantileResidualTests(fit42t2)
quantileResidualTests(fit42t2, nsimu=10000)
quantileResidualTests(fit42t2, lagsAC=c(1, 3, 6, 12), nsimu=20000)
diagnosticPlot(fit42t2, lagsAC=c(1, 3, 6, 12), nsimu=20000)
diagnosticPlot(fit42t2
diagnosticPlot(fit42t2)
diagnosticPlot(fit42t2)
fit33t <- fitGSMAR(T10Y3M, p=3, M=3, model="StMAR", conditional=FALSE, ncalls=12, ncores=3)
summary(fit33t)
plot(fit33t)
diagnosticPlot(fit33t)
quantileResidualTests(fit33t)
diagnosticPlot(fit42t)
plot(fit42t)
pacf(T10Y2Y^2)
pacf(T10Y2Y)
fit43t <- fitGSMAR(T10Y2Y, p=4, M=3, model="StMAR", conditional=FALSE, ncalls=12, ncores=3)
plot(43t)
plot(fit43t)
diagnosticPlot(fit43t)
quantileResidualTests(fit43t)
pacf(T10Y2Y)
pacf(T10Y2Y^2)
fit33t <- fitGSMAR(T10Y2Y, p=3, M=3, model="StMAR", conditional=FALSE, ncalls=12, ncores=3)
fit33t
plot(fit33t)
diagnosticPlot(fit33t)
fit52t <- fitGSMAR(T10Y2Y, p=5, M=2, model="StMAR", conditional=FALSE, ncalls=12, ncores=3)
fit52t
plot(fit52t)
summary(fit52t)
summary(alt_gsmar(fit52t, which_largest = 2))
summary(alt_gsmar(fit52t, which_largest = 3))
fit52t2 <- alt_gsmar(fit52t, which_largest = 3)
plot(fit52t2)
diagnosticPlot(fit52t2)
quantileResidualTests(fit52t2)
fit53t <- fitGSMAR(T10Y2Y, p=5, M=3, model="StMAR", conditional=FALSE, ncalls=12, ncores=3)
fit53t
summary(fit53t)
plot(fit53t)
diagnosticPlot(fit53t)
quantileResidualTests(fit53t)
quantileResidualTests(stmar_to_gstmar(fit53t))
# 10-Year cons mat minus 1-year const mat
T10Y1Y <- read_csv("C:/Users/saviviro/Downloads/fedgraph (3).csv")
T10Y1Y <- as.numeric(T10Y1Y[[2]])
# 10-Year cons mat minus 1-year const mat
T10Y1Y <- read_csv("C:/Users/saviviro/Downloads/fredgraph (3).csv")
T10Y1Y <- as.numeric(T10Y1Y[[2]])
T10Y1Y <- ts(T10Y1Y, start=c(1953, 4), frequency=12)
plot(T10Y1Y)
acf(T10Y1Y)
acf(T10Y1Y^2)
pacf(T10Y1Y^2)
pacf(T10Y1Y)
fit32t <- fitGSMAR(T10Y1Y, p=3, M=2, model="StMAR", conditional=FALSE, ncalls=12, ncores=3)
plot(fit32t)
diagnosticPlot(fit32t)
fit33t <- fitGSMAR(T10Y1Y, p=3, M=3, model="StMAR", conditional=FALSE, ncalls=12, ncores=3)
View(fit53t)
plot(fit33t)
summary(fit33t)
diagnosticPlot(fit33t)
fit42t <- fitGSMAR(T10Y1Y, p=4, M=2, model="StMAR", conditional=FALSE, ncalls=12, ncores=3)
plot(fit42t)
diagnosticPlot(fit42t)
quantileResidualTests(fit42t)
fit43t <- fitGSMAR(T10Y1Y, p=4, M=3, model="StMAR", conditional=FALSE, ncalls=12, ncores=3)
plot(fit43t)
summary(fit43t)
summary(alt_gsmar(fit43t, which_largest=2))
summary(alt_gsmar(fit43t, which_largest=3))
summary(alt_gsmar(fit43t, which_largest=4))
summary(alt_gsmar(fit43t, which_largest=5))
fit43t2 <- alt_gsmar(fit43t, which_largest=5)
plot(fit43t2)
diagnosticPlot(fit43t2)
mod43 <- stmar_to_gstmar(fit43t2)
summary(mod43)
plot(mod43)
quantileResidualTests(mod43, lagsAC=c(1, 3, 6, 12), nsimu=20000)
quantileResidualTests(mod43, lagsAC=c(1, 3, 6, 12), nsimu=1)
save.image("\\\\ad.helsinki.fi/home/s/saviviro/Desktop/uGMARartikkeli/reproduction_env")
load("\\\\ad.helsinki.fi/home/s/saviviro/Desktop/GSTMARartikkeli/empexample_env")
quantileResidualTests(mod53, lagsAC=c(1, 3, 6, 12), nsimu=1)
quantileResidualTests(mod52, lagsAC=c(1, 3, 6, 12), nsimu=1)
quantileResidualTests(mod6§, lagsAC=c(1, 3, 6, 12), nsimu=1)
quantileResidualTests(mod6§, lagsAC=c(1, 3, 6, 12), nsimu=1)
quantileResidualTests(mod61, lagsAC=c(1, 3, 6, 12), nsimu=1)
quantileResidualTests(mod53r, lagsAC=c(1, 3, 6, 12), nsimu=1)
devtools::document()
install.packages("mvnfast")
install.packages("pbapply")
install.packages("gsl")
install.packages("Brobdingnag")
install.packages("testthat")
TRUE

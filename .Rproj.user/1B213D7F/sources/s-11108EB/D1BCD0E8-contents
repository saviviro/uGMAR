p <- 7
r_p <- runif(p, min=-1, max=1)
ymat <- matrix(0, nrow=p, ncol=p) # Column for each loop 
for(k in 1:p) {
  if(k > 1) {
    for(i1 in 1:(k - 1)) {
      ymat[i1, k] <- ymat[i1, k - 1] + r_p[k]*ymat[k - i1, k - 1]
    } 
  }
  ymat[k, k] <- r_p[k]
}
-ymat[,p]

ymat0 <- matrix(0, nrow=p, ncol=p)
for(k in 1:p) {
  if(k > 1) {
    for(i1 in 1:(k - 1)) {
      ymat0[k, i1] <- ymat0[k - 1, i1] + r_p[k]*ymat0[k-1, k-i1]
    } 
  }
  ymat0[k, k] <- r_p[k]
#  print(ymat0)
}
-ymat0[p,]

pars <- -ymat[,p]
any(abs(polyroot(c(1, -pars))) <= 1 + 1e-8)

# Toimi n>2
draw_arcoefs <- function(p) {
  r_k <- runif(p, min=-1, max=1)
  if(p == 1) {
    return(r_k)
  } else if(p == 2) { # From (interior +-0.1 of) "stationarity triangle"
    ar1 <- runif(1, min=-1.9, max=1.9)
    ar2 <- runif(1, min=-0.9, max=min(1 - ar1, 1 + ar1))
    return(c(ar1, ar2))
  } else { # Algorithm from Monahan 1984
    ymat <- matrix(0, nrow=p, ncol=p) # Row for each loop
    for(k in 1:p) {
      
      for(i1 in 1:(k - 1)) {
        ymat[k, i1] <- ymat[k - 1, i1] + r_k[k]*ymat[k-1, k-i1]
      }
      ymat[k, k] <- r_k[k]
      print(ymat)
    }
    -ymat[p, ]
  }
  
}

pars <- replicate(n=100000, random_arcoefs(p=10, forcestat=TRUE))
which(sapply(1:ncol(pars), function(i1) any(abs(polyroot(c(1, -pars[,i1]))) <= 1 + 1e-8)))
pars[,1]
       